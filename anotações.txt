Comandos estudados:
 - git init : iniciar o repo
 - git init --bare: repo puro, q não fica sendo editado, só contém as alterações de todos
 - git status : verificar os arquivos monitorados pelo git no repo
 - git add (nome do arquivo) : adicionar um arquivo para o git monitorar / commitar
 - git add . : adicionar todos os arquivos para o git monitorar / commitar
 - git commit -m "[mensagem]" : commitar os arquivos adicionados anteriormente com uma mensagem sobre as suas alterações
 - git log : verificar lista de commits realizados
 - git log -- oneline : ver lista de commits resumidas em uma linha
 - git log -p : mostra oq foi alterado em cada commit
 - git log --graph : mostra as alterações em suas respectivas branches
 - git config --local [conf] "texto" : alterar configurações para esse repo
 - git config --global [conf] "texto" : alterar configurações para todos os repos  
 - git config [conf] : ver oq está configurado (ex: user.name)
 - git remote : verificar servidores git conectados com o repo
 - git remote add [caminho] : adicionarum servidor git ao repo
 - git remote -v : verificar caminhos de servers
 - git clone [caminho] : clonar um repo do endereço caminho
 - git push [caminho] [branch] : enviar dados da branch pro server
 - git push [caminho] [tag] : enviar dados da tag pro server
 - git pull [caminho] [branch] : baixar dados da branch de um server para a máquina
 - git branch : criar uma nova branch
 - git checkout [branch] : muda para a branch desejada
 - git checkout -b [branch] : criar a branch e mudar pra ela autormaticamente
 - git checkout -- [file] : desfazer modificações em determinado arquivo antes de dar o git add / volta para o estado do ultimo commit
 - git checkout [hash] : voltar para o commit hash / nessa volta o codigo fica solto, sem branch específica. para isso precisa criar uma nova branch.
        - para voltar pra master: git checkout master
 - git reset HEAD [file] : desfazer modificações em determinado arquivo antes de depois do git add e antes do commit / volta para o estado HEAD
 - git reverse [hash] : reverter um commit / pegar o hash no git log 
 - git merge [branch] : juntar a branch na branch atual em um commit novo e unico
 - git rebase [branch] : juntar os commits separados da branch na branch atual. esses commits entram antes do ultimo commit da branch atual 
 - git stash : salvar alterações temporariamente para não perder sem fazer add/commit 
 - git stash list : mostra a lista de tudo que está salvo no temporario
 - git stash apply [index] : trazer de volta para os arquivos de trabalho a stash de indice index / não retira do stash
 - git stash drop [index] : retirar a stash index do temporario
 - git stash pop : retira a ultima alteração do temporário e trás pros arquivos de trabalho 
 - git diff : mostra o que já foi alterado e não adicionado para ser commitado
 - git diff [hash1]..[hash2] : mostra todas as alterações desde o commit hash1 até o hash2
 - TAG : Definir um ponto da app que não pode mais mudar. ex: lançamento de uma versão (aparece no github como uma release!)
 - git tag -a [nome:ex v0.1.0] (opcional) -m [mensagem] : gerar uma tag para a app
 - 
 

Links uteis:
https://devhints.io/git-log 
http://git-school.github.io/visualizing-git

Boas práticas:
Nunca commitar código q não funciona
Commitar alterações significaticas
Fazer um pull sempre antes de começar a trabalhar